package com.aderowbotham.utils {		/**	 * @project com.aderowbotham.utils	 * @author Ade Rowbotham | www.aderowbotham.com	 * @copyright 2008	 **/		import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;		//import logging.Log;				 	public class LibraryAssetLoader extends EventDispatcher {		public var myLoader : Loader;		protected var applicationDomain : ApplicationDomain ;//		public override function toString() : String {//			//			return "SWFAssetLoader";//		}		public function LibraryAssetLoader($swfPath : String) {						//Log.INFO("SWFAssetLoader created, path = " + $swfPath, this.toString()) ;						myLoader = new Loader();			myLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,this.loaderCompleteListener);			myLoader.load(new URLRequest($swfPath));					}						private function loaderCompleteListener(event : Event) : void {									var loaderInfo : LoaderInfo = event.target as LoaderInfo ;			applicationDomain  = loaderInfo.applicationDomain ;									//Log.INFO ( "preloader library loaded" , this.toString ( ) ) ;			loaderInfo.removeEventListener ( Event.COMPLETE , this.loaderCompleteListener ) ;			//loaderInfo.removeEventListener ( IOErrorEvent.IO_ERROR , this.onIOError ) ;									dispatchEvent(new Event("SWFAssetLoader.Ready"));										}										private function getClass ( id : String ) : Class		{			//Log.DEBUG ( "getClass: "+id , this.toString ( ) ) ;			//Log.DEBUG ( "this.applicationDomain.getDefinition ( id ) = "+this.applicationDomain.getDefinition ( id ) , this.toString ( ) ) ;			return this.applicationDomain.getDefinition ( id ) as Class ;		}								public function getDisplayObject ( id : String ) : DisplayObject		{			var AssetClass : Class = this.getClass ( id ) ;			//Log.DEBUG ( "AssetClass: "+AssetClass.toString() , this.toString ( ) ) ;						var displayObject : DisplayObject = new AssetClass ( ) as DisplayObject ;			return displayObject ;		}								public function getSprite ( id : String ) : Sprite		{			var AssetClass : Class = this.getClass ( id ) ;			var sprite : Sprite = new AssetClass ( ) as Sprite ;						return sprite ;		}										public function getMovieClip (id:String) : MovieClip {						var AssetClass : Class = this.getClass ( id ) ;			var movieClip : MovieClip = new AssetClass ( ) as MovieClip ;						return movieClip;					}						public function getCustomMember (id :String ) : * {						//Log.DEBUG("getCustomMember runs",this.toString());						var AssetClass : Class = this.getClass ( id ) ;			var displayObj : * = new AssetClass ( )  ;									return displayObj ;					}					}}