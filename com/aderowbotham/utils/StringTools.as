package com.aderowbotham.utils {	/**	 * @project com.aderowbotham.utils	 * @author Ade Rowbotham | www.aderowbotham.com	 * @copyright 2008	 **/	public class StringTools {				public function StringTools(){					throw new Error("StringTools does not need to be instantiated");						}						public static function convertHTMLEntities(str:String):String { 			str = str.split("&emsp;").join("&#8195;"); 			str = str.split("&thinsp;").join("&#8201;"); 			str = str.split("&ndash;").join("&#8211;"); 			str = str.split("&mdash;").join("&#8212;"); 			str = str.split("&lsquo;").join("&#8216;"); 			str = str.split("&rsquo;").join("&#8217;"); 			str = str.split("&copy;").join("&#0169;");			str = str.split("&ldquo;").join("&#8220;"); 			str = str.split("&frasl;").join("&#8260;"); 			str = str.split("&euro;").join("&#8364;"); 			str = str.split("&trade;").join("&#8482;"); 			str = str.split("&larr;").join("&#8592;"); 			str = str.split("&rarr;").join("&#8594;"); 			str = str.split("&larr;").join("&#8592;"); 			str = str.split("&rarr;").join("&#8594;"); 			str = str.split("&harr;").join("&#8596;"); 			str = str.split("&lArr;").join("&#8656;"); 			str = str.split("&rArr;").join("&#8658;");			str = str.split("[br]").join("\n");	   		return str; 		} 						public static function parseBool(str:String):Boolean { 			//returns whether or not a string is intended to represent a boolean			return (str.toLowerCase() == "true" || str.toLowerCase() == "1" || str.toLowerCase() == "yes");				}						//remove any html-style tags from the string				public static function stripTags(inputStr:String):String{						var tempArray:Array = breakHTMLToElements(inputStr);						var outputString:String = "";						//go through text array and concentate strings that are NOT markup			for(var i:Number = 0; i<tempArray.length; i++){				if(tempArray[i].substr(0,1) == "<"){					//trace("MARKUP");					//elementTypes[i] = "markup";				} else {					//trace("text element");					outputString += tempArray[i];									}			}									return outputString;					}										//simple - return the string in reverse order		public static function reverseString(inputStr:String):String{						return inputStr.split("").reverse().join("");		}						//breaks a string containing HTML into its parts		//which are returned as an array		//e.g. <p>Ade <font color="#ff0000">is truly amazing</font></p>		/*		//returns the array: 		'<p>',		'Ade ',		'<font color="#ff0000">',		'is truly amazing',		'</font>'		'</p>		*/										public static function breakHTMLToElements(inputStr:String):Array {						//create array to hold 'sections' of text field - i.e. markup and content will be separated			var stringContent_array:Array = new Array();			var stringContentIndex:Number = 0;// counter			var tempString:String = "";						//trace("inputStr= "+inputStr);							//loop through characters in string			//and identify elements			for (var i:Number = 0; i<inputStr.length; i++) {						//it's the start of a new markup tag				var thisChar:String = inputStr.substr(i, 1);					//check for '<' or '>' and split into modules accordingly				switch (thisChar) {						case "<" :						//increment the counter, so long as it's not the first character						if (i != 0) {// && tempString.substr(tempString.length-1,1) != ">"){							stringContentIndex++;						}						//reset the temp string (and start it with this character) 						tempString = thisChar;						break;							case ">" :						//add to currentr string						tempString += thisChar;						stringContent_array[stringContentIndex] = tempString;						break;								default :						//if the last character of the current tempstring was a close tag, move on to the next						if (tempString.substr(tempString.length-1, 1) == ">") {							stringContentIndex++;							//reset string (new element)							tempString = thisChar;						} else {							//add to current element							tempString += thisChar;						}						//replace the content in the current array element						stringContent_array[stringContentIndex] = tempString;						//trace("stringContent_array[stringContentIndex] added: "+stringContent_array[stringContentIndex]);						break;					}//end switch				}//end for loop					return stringContent_array;			} //end htmlStringToElements			}		}