package com.aderowbotham.utils.display {		/**	 * @project com.aderowbotham.utils	 * @author Ade Rowbotham | www.aderowbotham.com	 * @copyright 2008	 **/		import flash.display.Sprite;		 	public class OuterBorder extends Sprite {						private var leftArea:Sprite;		private var rightArea:Sprite;		private var keyline:Sprite;				private var stageWidth:uint;		private var stageHeight:uint;				private var cornerRad:uint;		private var outsideFillColour:uint;		private var useKeyline:Boolean;		private var keylineColour:uint;									public function OuterBorder($stageWidth:uint,$stageHeight:uint,$cornerRadius:uint=20,$outsideFillColour:uint=0xffffff,$keyline:Boolean=true,$keylineColour:uint=0x333333) {						//makes the white curved border around the outside, with keyline						//set vars from arguments			stageWidth = $stageWidth;			stageHeight = $stageHeight;												cornerRad = $cornerRadius;			outsideFillColour = $outsideFillColour;			useKeyline = $keyline;			keylineColour = $keylineColour;																	//create white areas, which sit outside the keyline			leftArea = new Sprite();			rightArea = new Sprite();									//1 px less to allow for keyline			if(useKeyline){				stageWidth -= 1;				stageHeight -= 1;			}															drawHalfOuterBox(leftArea);			drawHalfOuterBox(rightArea);								//flip right area					rightArea.scaleX = -1;			rightArea.x = stageWidth;					addChild(leftArea);			addChild(rightArea);						if(useKeyline){												keyline = new Sprite();												drawKeyline();									addChild(keyline);			}										}						private function drawKeyline():void{						keyline.graphics.lineStyle(1,keylineColour,100,true,"none","square","miter");			keyline.graphics.moveTo(cornerRad,0);			keyline.graphics.lineTo(stageWidth-cornerRad,0);			keyline.graphics.curveTo(stageWidth,0,stageWidth,cornerRad);			keyline.graphics.lineTo(stageWidth,stageHeight-cornerRad);			keyline.graphics.curveTo(stageWidth,stageHeight,stageWidth-cornerRad,stageHeight);			keyline.graphics.lineTo(cornerRad,stageHeight);			keyline.graphics.curveTo(0,stageHeight,0,stageHeight-cornerRad);			keyline.graphics.lineTo(0,cornerRad);			keyline.graphics.curveTo(0,0,cornerRad,0);				keyline.graphics.endFill();			}								private function drawHalfOuterBox($displayObject:Sprite):void{						$displayObject.graphics.beginFill(outsideFillColour,100);			$displayObject.graphics.moveTo(cornerRad,0);			$displayObject.graphics.lineTo(stageWidth/2,0);			$displayObject.graphics.lineTo(stageWidth/2,-50);			$displayObject.graphics.lineTo(-50,-50);			$displayObject.graphics.lineTo(-50,stageHeight+50);			$displayObject.graphics.lineTo(stageWidth/2,stageHeight+50);			$displayObject.graphics.lineTo(stageWidth/2,stageHeight);			$displayObject.graphics.lineTo(cornerRad,stageHeight);			$displayObject.graphics.curveTo(0,stageHeight,0,stageHeight-cornerRad);			$displayObject.graphics.lineTo(0,cornerRad);			$displayObject.graphics.curveTo(0,0,cornerRad,0);			$displayObject.graphics.endFill();					}				public function resizeTo($stageWidth:uint,$stageHeight:uint):void{						stageWidth = $stageWidth;			stageHeight = $stageHeight;									if(useKeyline){				stageWidth -= 1;				stageHeight -= 1;			}												//reposition flipped right area			rightArea.x = stageWidth;						leftArea.graphics.clear();			rightArea.graphics.clear();						drawHalfOuterBox(leftArea);			drawHalfOuterBox(rightArea);						if(useKeyline){												keyline.graphics.clear();								drawKeyline();												}								}			}			}